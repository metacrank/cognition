[ compose ] mkopn
[ 2compose ] dup ( swap composed ) defopd ( ) "compose" ( 2compose ) ( -- composen 2compose ) mkbindopn-1
[ 3compose ] dup ( swap 2composed ) defopd ( ) "compose" ( 3compose ) ( -- composen 3compose ) mkbindopn-1
[ 4compose ] dup ( swap 3composed ) defopd ( ) "compose" ( 4compose ) ( -- composen 4compose ) mkbindopn-1
#[ mcompose ]

[ prepose ] mkopn
[ 2prepose ] dup ( swap preposed ) defopd ( ) "prepose" ( 2prepose ) ( -- preposen 2prepose ) mkbindopn-1
[ 3prepose ] dup ( swap 2preposed ) defopd ( ) "prepose" ( 3compose ) ( -- preposen 3prepose ) mkbindopn-1
[ 4prepose ] dup ( swap 3preposed ) defopd ( ) "prepose" ( 4compose ) ( -- preposen 4prepose ) mkbindopn-1
#[ mprepose ]

[ dip ] ( ) "compose" ( dip ) ( -- composen dip ) mkbindopn-1
[ 2dip ] ( ) "compose" ( swap dipd ) ( -- composen swap dipd ) mkbindopn-1
[ 3dip ] ( ) "compose" ( swap 2dipd ) ( -- composen swap 2dipd ) mkbindopn-1
[ 4dip ] ( ) "compose" ( swap 3dipd ) ( -- composen swap 3dipd ) mkbindopn-1
#[ mdip ]

[ dig ] ( ) "compose" ( dip swap ) ( -- composen dip swap ) mkbindopn-1
[ 2dig ] ( ) "compose" ( swap digd swap ) ( -- composen swap digd swap ) mkbindopn-1
[ 3dig ] ( ) "compose" ( swap 2digd swap ) ( -- composen swap 2digd swap ) mkbindopn-1
[ 4dig ] ( ) "compose" ( swap 3digd swap ) ( -- composen swap 3digd swap ) mkbindopn-1
#[ mdig ]

[ drill ] ( ) "curry" ( dig ) ( curryn dig ) mkbindopn
[ 2drill ] ( ) "curry" ( 2dig ) ( curryn 2dig ) mkbindopn
[ 3drill ] ( ) "curry" ( 3dig ) ( curryn 3dig ) mkbindopn
[ 4drill ] ( ) "curry" ( 4dig ) ( curryn 4dig ) mkbindopn
#[ mdrill ]

[ curry ] dup ( swap quote prepose ) def mkopn

[ with ] ( swap ) "curryd" ( swap ) ( swapd currydn swap ) mkbindopn
[ 2with ] ( swap ) "withd" ( swap ) ( swapd withdn swap ) mkbindopn
[ 3with ] ( swap ) "2withd" ( swap ) ( swapd 2withn swap ) mkbindopn
[ 4with ] ( swap ) "3withd" ( swap ) ( swapd 3withn swap ) mkbindopn
#[ mwith ]

[ quote ] mkopn
[ 2quote ] dup ( quote curry ) defopd ( 2quote ) "quote" ( ) ( 2quoted -- quoten ) mkbindopn-1
[ 3quote ] dup ( quote curry2 ) defopd ( 3quote ) "quote" ( ) ( 3quoted -- quoten ) mkbindopn-1
[ 4quote ] dup ( quote curry3 ) defopd ( 3quote ) "quote" ( ) ( 4quoted -- quoten ) mkbindopn-1
[ mquote ] dup ( swap quote swap -- curryn ) defopd ( mquote ) "quote" ( ) ( ( mquote ) dip -- quoten ) mkbindopn-1

[ push ] ( ) "quote" ( compose ) ( mquote compose ) mkbindnop
[ 2push ] ( ) "quote" ( swap composed ) ( mquote swap composed ) mkbindnop
[ 3push ] ( ) "quote" ( swap 2pushd ) ( mquote swap 2pushd ) mkbindnop
[ 4push ] ( ) "quote" ( swap 3pushd ) ( mquote swap 3pushd ) mkbindnop
#[ mpush ] ( (  ) mdip )...




# don needs optimization
[ do ] ( dup dip ) defopn
[ 2do ] ( dup dipd ) defopn
[ 3do ] ( dup 2dipd ) defopn
[ 4do ] ( dup 3dipd ) defopn
#[ mdo ] ( dupd -- mdip ) def

[ take ] dup ( swap push ) def mkop23

[ uncurry ] ( [ 1 ] split swap dip ) def
[ uncurry2 ] ( [ 2 ] split swap dip ) def
[ uncurry3 ] ( [ 3 ] split swap dip ) def
[ uncurry4 ] ( [ 4 ] split swap dip ) def
[ uncurryn ] ( split swap dip ) def

[ unpush ] dup ( size [ 1 ] - split eval ) def mkopn

[ unwith ] ( [ 1 ] split ( dip ) dip ) def
[ unwith2 ] ( [ 2 ] split ( dip ) dip ) def
[ unwith3 ] ( [ 3 ] split ( dip ) dip ) def
[ unwith4 ] ( [ 4 ] split ( dip ) dip ) def
[ unwithn ] ( split ( dip ) dip ) def

[ untake ] dup ( size [ 1 ] - split dip ) def mkop234


[ keep ] dup ( dupd dip ) def mkopd
[ 2keep ] dup ( ( 2quote dup ) dip compose dip eval ) def mkopd
[ 3keep ] dup ( ( 3quote dup ) dip compose dip eval ) def mkopd
[ 4keep ] dup ( ( 4quote dup ) dip compose dip eval ) def mkopd
[ mkeep ] dup ( swap ( swap ( mquote dup ) dip ) dip compose eval ) def mkopd

[ negate ] ( ( not ) compose ) def
[ when ] ( [ ] if ) def
[ else ] ( swap not swap when ) def

[ loop ] ( \ do (( loop )) curry when ) def         # [ body pred ] loop
[ while ] ( dod prepose (( loop )) curry when ) def # [ pred ] [ body ] while
[ until ] ( swap negate swap while ) def            # [ !pred ] [ body ] until
[ for ] ( ( dip ) curry prepose evalt while ) def  # [ init ] [ pred ] [ cont ] [ body ] for
[ times ] ( quote swap ( ( dup [ 0 ] > ) ( [ 1 ] - ) ) dip for drop ) def
[ break ] ( f return ) def
[ continue ] ( t return ) def



[ 0split ] ( [ 0 ] split ) def
[ 1split ] ( [ 1 ] split ) def
[ 2split ] ( [ 2 ] split ) def
[ 3split ] ( [ 3 ] split ) def
[ 4split ] ( [ 4 ] split ) def

[ 0split* ] ( size split ) def
[ 1split* ] ( size [ 1 ] - split ) def
[ 2split* ] ( size [ 2 ] - split ) def
[ 3split* ] ( size [ 3 ] - split ) def
[ 4split* ] ( size [ 4 ] - split ) def

[ first ] ( [ 1 ] vat ) def
[ second ] ( [ 2 ] vat ) def
[ third ] ( [ 3 ] vat ) def
[ fourth ] ( [ 4 ] vat ) def
[ last ] ( size [ 1 ] - vat ) def
[ second-last ] ( size [ 2 ] - vat ) def
[ third-last ] ( size [ 3 ] - vat ) def
[ fourth-last ] ( size [ 4 ] - vat ) def

[ head ] ( [ 0 ] swap substack ) def
[ trim ] ( ( size ) dip - head ) def # head*
[ tail ] ( ( size ) dip swap substack ) def
[ leave ] ( ( size ) dip - tail ) def # tail*
[ but-last ] ( size [ 1 ] - head ) def
[ rest ] ( size [ 1 ] swap substack ) def

[ pull ] ( split 1split swap composed ) def
[ set-vat ] ( swapd split rest swapd compose2 ) def
[ change-vat ] ( swapd split 1split ( swap ( swap eval ) dip swap ) dip compose2 ) def


[ (emk-quote) ] ( take ( dip ) compose ) def
[ (each-split-2) ] ( ( 1split ) dip swap ) def
[ (each-split-3) ] ( ( (each-split-2) ) dip swap ) def
[ (each-split-4) ] ( ( (each-split-3) ) dip swap ) def
[ (einc-idx) ] ( ( dip [ 1 ] + ) compose ) def

[ each ] ( ( 1split ) (emk-quote) ( size ) dip swap times drop ) def
[ 2each ] ( (each-split-2) (emk-quote) each drop ) def
[ 3each ] ( (each-split-3) (emk-quote) 2each drop ) def
[ 4each ] ( (each-split-4) (emk-quote) 3each drop ) def

#[ each-index ] (
#  ( [ 0 ] swap size ( < ) curry [ 0 ] swap ) dip
#  ( swap dup ) take ( dip [ 1 ] + dup ) compose
#  ( 1split ) take ( dip swap ) compose
#  while drop2
#) def

[ each-index ] ( [ 0 ] -rot ( swap dup ) take (einc-idx) each drop ) def
[ 2each-index ] ( [ 0 ] -roll ( rot dup ) take (einc-idx) 2each drop ) def
[ 3each-index ] ( [ 0 ] swap -rolld ( roll dup ) take (einc-idx) 3each drop ) def
[ 4each-index ] ( [ 0 ] -rot -rollt ( rolld swap dup ) take (einc-idx) 4each drop ) def

[ (madd-dp) ] ( ( dip prepose ) compose ) def
[ (map-quote-1) ] ( ( swap ) take (madd-dp) ) def
[ (map-quote-2) ] ( ( rot ) take (madd-dp) ) def
[ (map-quote-3) ] ( ( roll ) take (madd-dp) ) def
[ (map-quote-4) ] ( ( rolld swap ) take (madd-dp) ) def
[ (map-quote-5) ] ( ( ( rolld swap ) dip swap ) take (madd-dp) ) def

[ map ] dup ( ( 0split ) dip (map-quote-1) each ) def mkopd
[ 2map ] dup ( ( 0split ) 2dip (map-quote-2) 2each ) def mkopd
[ 3map ] dup ( ( 0split ) 3dip (map-quote-3) 3each ) def mkopd
[ 4map ] dup ( ( 0split ) 4dip (map-quote-4) 4each ) def mkopd

[ map-index ] ( ( 0split ) dip (map-quote-2) each-index ) def
[ 2map-index ] ( ( 0split ) 2dip (map-quote-3) 2each-index ) def
[ 3map-index ] ( ( 0split ) 3dip (map-quote-4) 3each-index ) def
[ 4map-index ] ( ( 0split ) 4dip (map-quote-5) 4each-index ) def

[ (emk-quote) (each-split-2) (each-split-3) (each-split-4) (einc-idx)
  (madd-dp) (map-quote-1) ( map-quote-2 ) (map-quote-3) (map-quote-4) (map-quote-5)
] ( undef ) map


[ filter ] dup ( ( dup ) take ( dip quote [ [ ] ] if ) compose map ) def mkopd
[ filter-index ] ( ( swap dup swapd ) take ( dip quote [ [ ] ] if ) compose map-index ) def

[ reduce ] ( swapd each ) def
[ 2reduce ] ( -rotd 2each ) def
[ 3reduce ] ( -rolld 3each ) def
[ 4reduce ] ( ( swap -rolld ) dip 4each ) def

[ all? ] ( t swap ( swap ) take ( dip and ) \ compose reduce ) [ 17 ] bind234op
[ any? ] ( f swap ( swap ) take ( dip or ) \ compose reduce ) [ 17 ] bind234op
[ none? ] ( \ any? not ) [ 0 ] bind234op
[ empty? ] dup ( size zero? ) def mkopd

# used to be 'range'
[ interval ] (
  ( stack swap dup ) dip
  [ 1 ] - ( < ) curry
  ( dup ( compose ) dip [ 1 ] + dup )
  while compose
) def

[ cartesian-map ] ( ( with map ) curry2 map ) def
[ cartesian-each ] ( ( with each ) curry2 each ) def
[ cartesian-find ] ( ( f ) 3dip ( with find swap ) curry2 ( nip ) prepose find nip swap ) # taken from factor
[ cartesian-product ] ( dup [ compose ] curry cartesian-map ) def # ( dup [ 2quote ] curry cartesian-map )

[ find-from ]
[ find-last-from ]

[ find ] ( [ 0 ] -rot find-from ) def
[ find-last ] ( ( size -- swap ) dip find-last-from ) def

[ index-from ] ( rot ( = ) curry find-from drop ) def
[ last-index-from ] ( rot ( = ) curry find-last-from drop ) def
[ index ] ( ( = ) with find drop ) def
[ last-index ] ( ( = ) with find-last drop ) def

[ sep ] ( size ( uncompose ) dip [ 1 ] - nquote ) def
[ join ]
[ follow ]

[ interleave ] (
  empty?t rot
  ( drop3 ) (
    swap dup ( compose ( 1split* ) dip swap mapd ) dip eval
  ) if
) def

[ case ] (
  unpush ( swap dup ) dip
  ( ( ( eval drop ) take ( = ) compose find swap ) dip swap ) dip swap
  ( drop2 last nip eval2 ) (
    size [ 1 ] =
    ( nip dip drop ) (
      nipd dip swapd =
      ( eval ) ( drop2 [ "NO CASE" ] ethrow ) if
    ) if
  ) if
) def

# for math.cog?
[ sum ] ( [ 0 ] ( + ) reduce ) def
[ product ] ( [ 1 ] ( * ) reduce ) def

[ flip ] ( macro swap (  ) )
[ transpose ]



[ weave ] drop # not ready to define weave

[ stack-wordlist ] ( wordlist ( unglue stack? nip ) filter ) def
[ macro-wordlist ] ( wordlist ( unglue macro? nip ) filter ) def


# complete expand (checks for definitions within child first without copying hashtables)
[ expand ] (
  size pos? ( stack? ) ( return ) if
  macro swap (
    macro (
      ( ( size dup pos? ) dip swap ) dip swap
      ( ( ( [ 1 ] - dup ( vat ) dip swap ( del ) dip ) dip compose ) dip dup eval )
      ( drop dropd )
      if
    ) dup eval ( (
        [ 1 ] split (
          isword (
            compose cd dup isdef
            ( unglue pop )
            ( pop dup isdef ( unglue ) ( ) if )
            if
          ) ( ) if
          swapd compose swap
        ) dip
        size pos? ) dip swap
      ( dup eval ) ( drop2 swap compose ) if
    ) dup eval
  ) ( (
      [ 1 ] split
      ( isword ( dup isdef ( unglue ) ( ) if ) ( ) if compose ) dip
      size pos? ( 4pick eval ) ( ) if
    ) dup -rotd eval drop dropd
  ) if
) def
