# Currying
[ curry ] ( swap quote prepose ) defopn

# Composition
[ compose ] mkopn
[ 2compose ] dup ( swap composed ) defopd ( ) "compose" ( 2compose ) ( -- composen 2compose ) mkbindopn-1
[ 3compose ] dup ( swap 2composed ) defopd ( ) "compose" ( 3compose ) ( -- composen 3compose ) mkbindopn-1
[ 4compose ] dup ( swap 3composed ) defopd ( ) "compose" ( 4compose ) ( -- composen 4compose ) mkbindopn-1
#[ mcompose ]

[ prepose ] mkopn
[ 2prepose ] dup ( swap preposed ) defopd ( ) "prepose" ( 2prepose ) ( -- preposen 2prepose ) mkbindopn-1
[ 3prepose ] dup ( swap 2preposed ) defopd ( ) "prepose" ( 3compose ) ( -- preposen 3prepose ) mkbindopn-1
[ 4prepose ] dup ( swap 3preposed ) defopd ( ) "prepose" ( 4compose ) ( -- preposen 4prepose ) mkbindopn-1
#[ mprepose ]

# Evaluation
[ dip ] ( ) "compose" ( dip ) ( -- composen dip ) mkbindopn-1
[ 2dip ] ( ) "compose" ( swap dipd ) ( -- composen swap dipd ) mkbindopn-1
[ 3dip ] ( ) "compose" ( swap 2dipd ) ( -- composen swap 2dipd ) mkbindopn-1
[ 4dip ] ( ) "compose" ( swap 3dipd ) ( -- composen swap 3dipd ) mkbindopn-1
#[ mdip ]

[ dig ] ( dip swap ) defopd
[ dig2 ] ( dig -2rotd ) defopd
[ dig3 ] ( dig -3rotd ) defopd
[ dig4 ] ( dig -4rotd ) defopd
[ dign ] ( digd -mrotd ) defopd
[ 2dig ] ( swap digd swap ) defopd
[ 2dig2 ] ( swap digd2 swap -2rotd ) defopd
[ 2dig3 ] ( swap digd3 swap -3rotd ) defopd
[ 2dig4 ] ( swap digd4 swap -4rotd ) defopd
[ 2dign ] ( swapd dup digtn swap -mrotd ) defopd
[ 3dig ] ( swap 2digd swap ) defopd
[ 3dig2 ] ( swap 2digd2 swap -2rotd ) defopd
[ 3dig3 ] ( swap 2digd3 swap -3rotd ) defopd
[ 3dig4 ] ( swap 2digd4 swap -4rotd ) defopd
[ 3dign ] ( swapd dup 2digtn swap -mrotd ) defopd
[ 4dig ] ( swap 3digd swap ) defopd
[ 4dig2 ] ( swap 3digd2 swap -2rotd ) defopd
[ 4dig3 ] ( swap 3digd3 swap -3rotd ) defopd
[ 4dig4 ] ( swap 3digd4 swap -4rotd ) defopd
[ 4dign ] ( swapd dup 3digtn swap -mrotd ) defopd
#[ mdig ]

[ drill ] ( ) "curry" ( dig ) ( curryn dig ) mkbindopn
[ 2drill ] ( ) "curry" ( 2dig ) ( curryn 2dig ) mkbindopn
[ 3drill ] ( ) "curry" ( 3dig ) ( curryn 3dig ) mkbindopn
[ 4drill ] ( ) "curry" ( 4dig ) ( curryn 4dig ) mkbindopn
#[ mdrill ]

# Currying extension
[ with ] ( swap ) "curryd" ( swap ) ( swapd currydn swap ) mkbindopn
[ 2with ] ( swap ) "withd" ( swap ) ( swapd withdn swap ) mkbindopn
[ 3with ] ( swap ) "2withd" ( swap ) ( swapd 2withn swap ) mkbindopn
[ 4with ] ( swap ) "3withd" ( swap ) ( swapd 3withn swap ) mkbindopn
#[ mwith ]

# needs fixing for deep versions
[ quote ] mkopn
[ mquote ] ( quoten ) def#opd
[ quote ] ( quote ) "curry" ( ) ( swap quote swap -- curryn ) mkbindopn-1
[ 2quote ] ( ) "quote" ( quote ) ( quoten quote ) mkbindopn
[ 3quote ] ( ) "quote" ( 2quote ) ( quoten 2quote ) mkbindopn
[ 4quote ] ( ) "quote" ( 3quote ) ( quoten 3quote ) mkbindopn
[ mquote ] ( ) "quoted" ( -- mquote ) ( ( quoten ) drill -- mquote ) mkbindopn

[ push ] ( ) "quote" ( compose ) ( quoten compose ) mkbindopn
[ 2push ] ( ) "quote" ( 2compose ) ( quoten swap composed ) mkbindopn
[ 3push ] ( ) "quote" ( 3compose ) ( quoten swap 2pushd ) mkbindopn
[ 4push ] ( ) "quote" ( 4compose ) ( quoten swap 3pushd ) mkbindopn
#[ mpush ] ( (  ) mdip )...

[ take ] ( swap push ) defopn
[ 2take ] ( swap ) "taked" ( swap ) ( swapd takedn swap ) mkbindopn
[ 3take ] ( swap ) "2taked" ( swap ) ( swapd 2takedn swap ) mkbindopn
[ 4take ] ( swap ) "3taked" ( swap ) ( swapd 3takedn swap ) mkbindopn
#[ mtake ]

# Evaluation extension
# 2/3/4don needs optimization
[ do ] ( dup dip ) defopn
[ 2do ] ( dup dipd ) defopn
[ 3do ] ( dup 2dipd ) defopn
[ 4do ] ( dup 3dipd ) defopn
#[ mdo ] ( dupd -- mdipd ) def
# needs optimization
[ dog ] ( dup dig ) defopn
[ 2dog ] ( dup digd swap ) defopn
[ 3dog ] ( dup 2digd swap ) defopn
[ 4dog ] ( dup 3digd swap ) defopn
#[ mdog ] ( dupd -- mdigd swap ) def

# needs genlib.cog improvements and generalizations
[ keep ] ( dupd dip ) defopd
[ keep2 ] ( ( quote2 do ) dip dip eval ) defopd
[ keep3 ] ( ( quote3 do ) dip dip eval ) defopd
[ keep4 ] ( ( quote4 do ) dip dip eval ) defopd
[ keepn ] ( ( quoten do ) curry dip dip eval ) defopd
[ 2keep ] ( 2pickd dip ) defopd
[ 2keep2 ] ( ( quote2 do ) swap digd dip eval ) defopd
[ 2keep3 ] ( ( quote3 do ) swap digd dip eval ) defopd
[ 2keep4 ] ( ( quote4 do ) swap digd dip eval ) defopd
[ 2keepn ] ( ( quoten do ) curry digd dip eval ) defopd
[ 3keep ] ( 3pickd dip ) defopd
[ 3keep2 ] ( ( quote2 do ) swap 2digd dip eval ) defopd
[ 3keep3 ] ( ( quote3 do ) swap 2digd dip eval ) defopd
[ 3keep4 ] ( ( quote4 do ) swap 2digd dip eval ) defopd
[ 3keepn ] ( ( quoten do ) curry 2digd dip eval ) defopd
[ 4keep ] ( 4pickd dip ) defopd
[ 4keep2 ] ( ( quote2 do ) swap 3digd dip eval ) defopd
[ 4keep3 ] ( ( quote3 do ) swap 3digd dip eval ) defopd
[ 4keep4 ] ( ( quote4 do ) swap 3digd dip eval ) defopd
[ 4keepn ] ( ( quoten do ) curry swap 3digd dip eval ) defopd

# Stackops dup variants
[ 2dup ] ( quote2 ) "do" ( eval ) ( ( quote2 ) dip don eval ) mkbindopn
[ 2dup ] ( swap dup ( swap dup ) dip swap ) defopd # optimization
[ 3dup ] ( quote3 ) "do" ( eval ) ( ( quote3 ) dip don eval ) mkbindopn
[ 4dup ] ( quote4 ) "do" ( eval ) ( ( quote4 ) dip don eval ) mkbindopn

[ over ] ( dupd swap ) defopd
[ 2over ] ( ( ( swap dup ) dip swap ) do dip swap ) defopd
[ 3over ] ( ( quote curry2 do ) dip swap eval ) defopd
[ 4over ] ( ( quote curry3 do ) dip swap eval ) defopd

# Conditionals
[ negate ] ( ( not ) compose ) def
[ when ] ( [ ] if ) def
[ unless ] ( swap not swap when ) def
[ which ] ( quoted quote if ) def
[ most ] ( keep2 which ) def

[ mk-if-unary ] ( ( 2dip if ) curry def ) def
[ mk-when-unary ] ( ( dip when ) curry def ) def
[ mk-unless-unary ] ( ( dip unless ) curry def ) def
[ mk-if-when-unless ] (
  ( ( "if-" swap concat ) keep ( "when-" swap concat ) keep "unless-" swap concat ) dip
  ( mk-unless-unary ) keep ( mk-when-unary ) keep mk-if-unary
) def

[ word ] ( isword ) mk-if-when-unless
[ stack ] ( stack? ) mk-if-when-unless
[ macro ] ( macro? ) mk-if-when-unless
[ empty ] ( empty? ) mk-if-when-unless
[ def ] ( isdef ) mk-if-when-unless
[ int ] ( isint ) mk-if-when-unless
[ float ] ( isint ) mk-if-when-unless
[ pos ] ( pos? ) mk-if-when-unless
[ neg ] ( neg? ) mk-if-when-unless
[ non-neg ] ( non-neg? ) mk-if-when-unless
[ non-pos ] ( non-pos? ) mk-if-when-unless
[ zero ] ( zero? ) mk-if-when-unless
[ one ] ( one? ) mk-if-when-unless
[ two ] ( two? ) mk-if-when-unless
[ three ] ( three? ) mk-if-when-unless
[ four ] ( four? ) mk-if-when-unless
[ negative-zero ] ( negative-zero? ) mk-if-when-unless
[ i ] ( i? ) mk-if-when-unless

# Loops
[ loop ] ( \ do (( loop )) curry when ) def         # [ body pred ] loop
[ while ] ( dod prepose (( loop )) curry when ) def # [ pred ] [ body ] while
[ until ] ( swap negate swap while ) def            # [ !pred ] [ body ] until
[ for ] ( ( dip ) curry prepose evalt while ) def  # [ init ] [ pred ] [ cont ] [ body ] for
[ times ] ( quote swap ( ( dup zero > ) ( -- ) ) dip for drop ) def
[ break ] ( f return ) def
[ continue ] ( t return ) def

# Decomposition
[ 0split ] ( zero split ) defopn
[ 1split ] ( one split ) defopn
[ 2split ] ( two split ) defopn
[ 3split ] ( three split ) defopn
[ 4split ] ( four split ) defopn

[ split* ] ( ( size ) dip - split ) def
[ 0split* ] ( size split ) defopn
[ 1split* ] ( size -- split ) defopn
[ 2split* ] ( size two - split ) defopn
[ 3split* ] ( size three - split ) defopn
[ 4split* ] ( size four - split ) defopn

# Basic element operations
[ zeroth ] ( zero vat ) def
[ first ] ( one vat ) def
[ second ] ( two vat ) def
[ third ] ( three vat ) def
[ fourth ] ( four vat ) def
[ last ] ( size -- vat ) def
[ second-last ] ( size two - vat ) def
[ third-last ] ( size three - vat ) def
[ fourth-last ] ( size four - vat ) def

[ first2 ] ( first swap second 2compose swap ) def
[ first3 ] ( first swap second 2compose third 2compose swap ) def
[ first4 ] ( first swap second 2compose third 2compose fourth 2compose swap ) def
[ second2 ] ( second swap third 2compose swap ) def
[ second3 ] ( second swap third 2compose fourth 2compose swap ) def
#...

[ head ] ( zero swap substack ) def
[ trim ] ( ( size ) dip - head ) def # head*
[ tail ] ( ( size ) dig substack ) def
[ leave ] ( ( size dup ) dip - swap substack ) def # tail*
[ but-last ] ( size -- head ) def
[ rest ] ( size one swap substack ) def

[ vat ] mkopd
[ nth ] ( dup ++ substack ) defopd
[ pull ] ( split 1split swap composed ) def
[ set-vat ] ( swapd split rest swapd compose2 ) def
[ swap-vat ] ( swapd split 1split spind compose2 swap ) def
[ change-vat ] ( ( dup ( pull ) dip ) dip drill-operator dip put ) def
[ vat-destruct ] ( f swap swap-vat ) def

# Uncurrying
[ uncurry ] ( ) "split" ( evald ) ( split evald ) bindnop
[ uncurry ] ( 1split evald ) defopd

[ unpush ] ( ) "split*" ( eval ) ( split* eval ) bindnop
[ unpush ] ( 1split* eval ) defopd
#[ 2unpush ] ( ( 1split* ) dig eval ) def
#[ 2unpush2 ] ( ( 2split* ) dig eval ) def
#...
#[ 4unpush ] ( ( 1split* ) 3dig eval ) def
#...
#[ 4unpushn ] ( ( split* ) 3drill eval ) def
#[ munpush ] ( ( 1split* ) swap mdig eval ) def
#[ munpush2 ] ( ( 2split* ) swap mdig eval ) def
#[ munpushn ] ( ( split* ) swap mdrill eval ) def

[ unwith ] ( ) "split" ( dipd ) ( split dipd ) bindnop
[ unwith ] ( 1split dipd ) defopd
[ 2unwith ] ( ) "split" ( 2dipd ) ( split 2dipd ) bindnop
[ 2unwith ] ( 1split 2dipd ) defopd
[ 3unwith ] ( ) "split" ( 3dipd ) ( split 3dipd ) bindnop
[ 3unwith ] ( 1split 3dipd ) defopd
[ 4unwith ] ( ) "split" ( 4dipd ) ( split 4dipd ) bindnop
[ 4unwith ] ( 1split 4dipd ) defopd
#[ munwith ] ( ( 1split ) dip mdipd ) defopd
#[ munwithn ] ( ( split ) curry dip mdipd ) defopd

[ untake ] ( 1split* dip ) defopn
[ 2untake ] ( swap ) "untaked" ( swap ) ( ( untaken ) drill2 ) bindopn
[ 3untake ] ( swap ) "2untaked" ( swap ) ( ( 2untaken ) 2drill2 ) bindopn
[ 4untake ] ( swap ) "3untaked" ( swap ) ( ( 3untaken ) 3drill2 ) bindopn
#[ muntake ] (  )

[ uncompose ] mkopd

# Operators
[ eval-operator ] ( ( eval ) curry ) def
[ swap-operator ] ( eval-operator ( swap ) prepose ) def
[ rot-operator ] ( eval-operator ( rot ) prepose ) def
[ roll-operator ] ( eval-operator ( roll ) prepose ) def
[ spin-operator ] ( eval-operator ( spin ) prepose ) def
[ 4spin-operator ] ( eval-operator ( 4spin ) prepose ) def

[ curry-operator ] ( ( curry ) curry ) def
[ curry2-operator ] ( ( curry2 ) curry ) def
[ curry3-operator ] ( ( curry3 ) curry ) def
[ curry4-operator ] ( ( curry4 ) curry ) def
[ curryn-operator ] ( ( curryn ) curry ) def
[ curry-dip-operator ] ( ( curry dip ) curry ) def
[ curry2-dip-operator ] ( ( curry2 dip ) curry ) def
[ curry3-dip-operator ] ( ( curry3 dip ) curry ) def
[ curry4-dip-operator ] ( ( curry4 dip ) curry ) def
[ curryn-dip-operator ] ( ( curryn dip ) curry ) def
[ currier ] ( curry-operator ) def

[ compose-operator ] ( ( compose ) curry ) def
[ composer ] ( compose-operator ) def
[ prepose-operator ] ( ( prepose ) curry ) def
[ preposer ] ( prepose-operator ) def

[ dip-operator ] ( ( dip ) curry ) def
[ dipper ] ( dip-operator ) def

[ dig-operator ] ( ( dig ) curry ) def
[ 2dig-operator ] ( ( 2dig ) curry ) def
#...
[ digger ] ( dig-operator ) def

[ drill-operator ] ( ( drill ) curry ) def
[ drill2-operator ] ( ( drill2 ) curry ) def
[ drill3-operator ] ( ( drill3 ) curry ) def
[ drill4-operator ] ( ( drill4 ) curry ) def
[ 2drill-operator ] ( ( 2drill ) curry ) def
#...
[ driller ] ( drill-operator ) def

[ do-operator ] ( ( do ) curry ) def
[ doer ] ( do-operator ) def

[ dog-operator ] ( ( dog ) curry ) def
[ dogger ] ( dog-operator ) def

[ keep-operator ] ( ( keep ) curry ) def
[ keep2-operator ] ( ( keep2 ) curry ) def
[ keep3-operator ] ( ( keep3 ) curry ) def
[ keep4-operator ] ( ( keep4 ) curry ) def
[ keepn-operator ] ( ( keepn ) curry ) def
[ keeper ] ( keep-operator ) def

[ if-operator ] ( ( if ) curry2 ) def
[ when-operator ] ( ( when ) curry ) def
[ unless-operator ] ( ( unless ) curry ) def
[ which-operator ] ( quoted quote if-operator ) def
[ most-operator ] ( ( most ) curry2 ) def

[ vat-operator ] ( curry-dip-operator ( vat ) prepose ) def
[ 2vat-operator ] (
  curry2-dip-operator dip-operator
  ( ( vat ) curry bi@ swap ) prepose
) def
[ 3vat-operator ] (
  ( curry2 swap ( curry dip ) dip ) curry
  dip-operator ( ( vat ) curry tri@ swap ) prepose
) def
[ 4vat-operator ] (
  ( curry2 swap ( curry swap ( curry dip ) dip ) dip ) curry
  dip-operator ( ( vat ) curry quad@ swap ) prepose
) def
#[ mvat-operator ]

[ vat-destruct-operator ] ( curry-dip-operator ( vat-destruct ) prepose ) def
[ 2vat-destruct-operator ] (
  curry2-dip-operator dip-operator
  ( ( vat-destruct ) curry bi@ swap ) prepose
) def
[ 3vat-destruct-operator ] (
  ( curry2 swap ( curry dip ) dip ) curry
  dip-operator ( ( vat-destruct ) curry tri@ swap ) prepose
) def
[ 4vat-destruct-operator ] (
  ( curry2 swap ( curry swap ( curry dip ) dip ) dip ) curry
  dip-operator ( ( vat-destruct ) curry quad@ swap ) prepose
) def
#[ mvat-destruct-operator ]

[ vat-drill-operator ] ( drill-operator ( vat ) prepose ) def
[ 2vat-drill-operator ] (
  drill2-operator dig-operator
  ( ( vat ) curry bi@ swap ) prepose
) def
[ 3vat-drill-operator ] (
  ( curry2 ( drill ) drill ) curry
  dig-operator ( ( vat ) curry tri@ swap ) prepose
) def
[ 4vat-drill-operator ] (
  ( curry2 ( curry ( drill ) drill ) drill ) curry
  dig-operator ( ( vat ) curry quad@ swap ) prepose
) def
#[ mvat-drill-operator ]

[ vat-drill-destruct-operator ] ( drill-operator ( vat-destruct ) prepose ) def
[ 2vat-drill-destruct-operator ] (
  drill2-operator dig-operator
  ( ( vat-destruct ) curry bi@ swap ) prepose
) def
[ 3vat-drill-destruct-operator ] (
  ( curry2 ( drill ) drill ) curry
  dig-operator ( ( vat-destruct ) curry tri@ swap ) prepose
) def
[ 4vat-drill-destruct-operator ] (
  ( curry2 ( curry ( drill ) drill ) drill ) curry
  dig-operator ( ( vat-destruct ) curry quad@ swap ) prepose
) def
#[ mvat-drill-destruct-operator ]

# these next two sections greatly need improvements to genlib.cog
#
#current stack: x1...xn y1...yn q1 q2...qm
#let a be the number of values in each set of x,y etc., b be the number of such sets,
# and c be the number of quotes to apply on each set of values.
#let p be the numerical value of (bi/tri).
#
#then
#'n(bi/tri/quad)'  operates on a stack with a=n, b=1, c=p,
#'n(bi/tri/quad)*' operates on a stack with a=n, b=p, c=1,
#'n(bi/tri/quad)@' operates on a stack with a=n, b=p, c=1, and multiplies the set of quotes by p,

[ bi ] ( ( keep ) dip eval ) def
[ 2bi ] ( ( keep2 ) dip eval ) def
[ 3bi ] ( ( keep3 ) dip eval ) def
[ 4bi ] ( ( keep4 ) dip eval ) def
[ nbi ] ( ( keepn ) curry dip eval ) def
[ tri ] ( ( ( keep ) dip keep ) dip eval ) def
[ 2tri ] ( ( ( keep2 ) dip keep2 ) dip eval ) def
[ 3tri ] ( ( ( keep3 ) dip keep2 ) dip eval ) def
[ ntri ] ( ( ( keepn ) curry 2do eval ) curry dip eval ) def
[ quad ] ( ( ( ( keep ) dip keep ) dip keep ) dip eval ) def
[ 2quad ] ( ( ( ( keep2 ) dip keep2 ) dip keep2 ) dip eval ) def
[ 3quad ] ( ( ( ( keep3 ) dip keep3 ) dip keep3 ) dip eval ) def
[ 4quad ] ( ( ( ( keep4 ) dip keep4 ) dip keep4 ) dip eval ) def
[ nquad ] ( ( ( ( keepn ) curry 2do eval ) curry 2do eval ) curry dip eval ) def

[ bi* ] ( dipd eval ) def
[ 2bi* ] ( 2dipd eval ) def
[ 3bi* ] ( 3dipd eval ) def
[ 4bi* ] ( 4dipd eval ) def
[ nbi* ] ( mdipd eval ) def
[ tri* ] ( ( 2dipd dip ) dip eval ) def
[ 2tri* ] ( ( ( ( quote2 quoted2 ) dip 2dip deep ) dip dip eval ) dip eval ) def
[ 3tri* ] ( ( ( ( quote3 quoted3 ) dip 2dip deep ) dip dip eval ) dip eval ) def
[ 4tri* ] ( ( ( ( quote4 quoted4 ) dip 2dip deep ) dip dip eval ) dip eval ) def
[ ntri* ] ( ( ( ( ( quoten ) ( quotedn ) bi ) curry dip 2dip deep ) curry dip dip eval ) curry dip eval ) def
[ quad* ] ( ( ( 3dipd 2dip ) dip dip ) dip eval ) def
[ 2quad* ] ( ( ( ( ( quote2 ( quote2 quoted2 ) dip ) dip 3dip deepd ) dip 2dip deep ) dip dip eval ) dip eval ) def
[ 3quad* ] ( ( ( ( ( quote3 ( quote3 quoted3 ) dip ) dip 3dip deepd ) dip 2dip deep ) dip dip eval ) dip eval ) def
[ 4quad* ] ( ( ( ( ( quote4 ( quote4 quoted4 ) dip ) dip 3dip deepd ) dip 2dip deep ) dip dip eval ) dip eval ) def
[ nquad* ] ( ( ( ( ( ( quote2 ) keep ( ( quote2 ) ( quoted2 ) bi ) curry dip ) curry dip 3dip deepd ) curry dip 2dip deep ) curry dip dip eval ) curry dip eval ) def

[ bi@ ] ( dup ) "bi*" ( dupd nbi* ) bindnop
[ tri@ ] ( dup2 ) "tri*" ( dupd2 ntri* ) bindnop
[ quad@ ] ( dup3 ) "quad*" ( dupd3 nquad* ) bindnop

# derived words
[ bi-curry ] ( ( curry-operator ) bi@ bi ) def
#[ bi-curry2 ] ( ( curry2-operator ) bi@ 2bi ) def
[ tri-curry ] ( ( curry-operator ) tri@ tri ) def
[ quad-curry ] ( ( curry-operator ) quad@ quad ) def

[ bi-curry* ] ( ( curry-operator ) bi@ bi* ) def
[ tri-curry* ] ( ( curry-operator ) tri@ tri* ) def
[ quad-curry* ] ( ( curry-operator ) quad@ quad* ) def

[ bi-curry@ ] ( curry-operator bi@ ) def
[ tri-curry@ ] ( curry-operator tri@ ) def
[ quad-curry@ ] ( curry-operator quad@ ) def

# Element and set/sequence operations
# [ quot ] [ n ] bounds-check? --> [ quot ] [ n ] [ t/f ]
[ bounds-check? ] ( dup ( ( size ) dig over > ) ( f ) if-non-neg ) def
[ bounds-check-eval ] ( ( bounds-check? ) dip ( drop f f ) if ) def
[ set-bounds ] ( ( ( size ) dig ) curry dip ) def
[ index/element ] ( dup2 ( vatd swap ) when ) def

# from factor math
[ each-integer-from ] (
  2over <
  ( ( nip eval ) keep3 ( ++ ) 2dip \ each-integer-from )
  ( drop3 ) if
) def
[ find-integer-from ] (
  ( ip ) 3dip
  2over < (
    ( nip eval ) keep3 roll
    ( drop2 ) ( ( ++ ) 2dip \ find-integer-from ) if
  ) ( drop3 f ) if
) def
[ find-last-integer ] (
    over neg?
    ( drop2 f ) (
        ( eval ) keep2 rot
        ( drop ) ( ( -- ) dip \ find-last-integer ) if
    ) if
) def
[ find-integer ] ( zero -rot find-integer-from ) def

[ each-from ] ( set-bounds vat-destruct-operator each-integer-from drop ) def
[ 2each-from ] ( set-bounds 2vat-destruct-operator each-integer-from drop ) def
[ 3each-from ] ( set-bounds 3vat-destruct-operator each-integer-from drop ) def
[ 4each-from ] ( set-bounds 4vat-destruct-operator each-integer-from drop ) def
#[ meach-from ]

[ each ] ( zero each-from ) def
#[ each2 ] ( zero each2-from ) def
#[ each3 ] ( zero each3-from ) def
#[ each4 ] ( zero each4-from ) def
[ 2each ] ( zero 2each-from ) def
#[ 2each2 ] ( zero 2each2-from ) def
#[ 2each3 ] ( zero 2each3-from ) def
#[ 2each4 ] ( zero 2each4-from ) def
[ 3each ] ( zero 2each-from ) def
#[ 3each2 ] ( zero 2each2-from ) def
#[ 3each3 ] ( zero 2each3-from ) def
#[ 3each4 ] ( zero 2each4-from ) def
[ 4each ] ( zero 2each-from ) def
#[ 4each2 ] ( zero 2each2-from ) def
#[ 4each3 ] ( zero 2each3-from ) def
#[ 4each4 ] ( zero 2each4-from ) def
#[ meach ]

# temporary (until we have vat-index -type operators)
[ (einc-idx) ] ( ( dip ++ ) compose ) def

[ each-index ] ( zero -rot ( swap dup ) take (einc-idx) each drop ) def
[ 2each-index ] ( zero -roll ( rot dup ) take (einc-idx) 2each drop ) def
[ 3each-index ] ( zero swap -rolld ( roll dup ) take (einc-idx) 3each drop ) def
[ 4each-index ] ( zero -rot -rollt ( rolld swap dup ) take (einc-idx) 4each drop ) def
#[ meach-index ]

[ (einc-idx) ] undef

# factors of map
[ (map-add-dsc) ] ( ( dig compose ) compose ) def
[ (map-quote-1) ] ( ( swap ) take (map-add-dsc) ) def
[ (map-quote-2) ] ( ( rot ) take (map-add-dsc) ) def
[ (map-quote-3) ] ( ( roll ) take (map-add-dsc) ) def
[ (map-quote-4) ] ( ( rolld swap ) take (map-add-dsc) ) def
[ (map-quote-5) ] ( ( ( rolld swap ) dig ) take (map-add-dsc) ) def

[ map ] ( ( 0split ) dip (map-quote-1) each ) defopd
[ 2map ] ( ( 0split ) 2dip (map-quote-2) 2each ) defopd
[ 3map ] ( ( 0split ) 3dip (map-quote-3) 3each ) defopd
[ 4map ] ( ( 0split ) 4dip (map-quote-4) 4each ) defopd
#[ mmap ]

[ map-index ] ( ( 0split ) dip (map-quote-2) each-index ) def
[ 2map-index ] ( ( 0split ) 2dip (map-quote-3) 2each-index ) def
[ 3map-index ] ( ( 0split ) 3dip (map-quote-4) 3each-index ) def
[ 4map-index ] ( ( 0split ) 4dip (map-quote-5) 4each-index ) def
#[ mmap-index ]

[ (map-add-dsc) (map-quote-1) (map-quote-2) (map-quote-3) (map-quote-4) (map-quote-5) ]
( undef ) each

[ filter ] ( ( dup ) take ( dip [ ] which ) compose map ) def
[ filter-index ] ( ( over ) take ( dip quote [ [ ] ] if ) compose map-index ) def

[ reduce ] ( swapd each ) def
[ 2reduce ] ( -rotd 2each ) def
[ 3reduce ] ( -rolld 3each ) def
[ 4reduce ] ( ( swap -rolld ) dip 4each ) def
#[ mreduce ] (  )

[ index-error-empty ] ( ( "INDEX OUT OF RANGE" ereturn ) when-empty ) def

[ map-reduce ] ( (
    ( index-error-empty 1split ) dip
    2do ( swap ) take ( dig ) compose
  ) dig prepose each
) def
[ 2map-reduce ] ( ( (
      ( ( index-error-empty ) bi@ ) dip
      2vat-destruct-operator eval ) ( drill2-operator ) bi
  ) dig prepose 2each
) def
[ 3map-reduce ] ( ( (
      ( ( index-error-empty ) tri@ ) dip
      3vat-destruct-operator eval ) ( drill3-operator ) bi
  ) dig prepose 3each
) def
[ 4map-reduce ] ( ( (
      ( ( index-error-empty ) quad@ ) dip
      4vat-destruct-operator eval ) ( drill4-operator ) bi
  ) dig prepose 4each
) def
#[ mmap-reduce ] (
#  ( ( mvat-destruct-operator eval ) ( drilln-operator ) 2bi )
#  ( drill prepose ) 2keep meach
#) def

# [ seq ] [ n ] [ quot ] find-from --> [ seq ] [ i ] [ elt ]
[ do-find-from ] ( ( size ) swap digd vat-drill-operator find-integer-from ) def
[ do-find-last-from ] ( vat-drill-operator find-last-integer ) def
[ find-from ] ( ( do-find-from index/element ) curry bounds-check-eval ) def
[ find-last-from ] ( ( do-find-last-from index/element ) curry bounds-check-eval ) def
[ find ] ( zero swap find-from ) def
[ find-last ] ( ( size -- ) dip find-last-from ) def
#[ nfind ]

[ index-from ] ( swap ( = ) curry find-from drop ) def
[ last-index-from ] ( swap ( = ) curry find-last-from drop ) def
[ index ] ( ( = ) curry find drop ) def
[ last-index ] ( ( = ) curry find-last drop ) def

[ cartesian-map ] ( swap-operator ( with map ) curry2 map ) def
[ cartesian-each ] ( swap-operator ( with each ) curry2 each ) def
[ cartesian-find ] (
  swap-operator ( f f ) 3dip
  ( with find swap ) curry2 ( nip2 ) prepose
  find nip -rotd swap
) def
[ cartesian-find-index ] (
  swap-operator ( f f ) 3dip
  ( with find drop dup ) curry2 ( nip2 ) prepose
  find drop -rotd swap
) def
[ cartesian-product ] ( ( compose quote ) cartesian-map ) def

[ any? ] ( zero swap do-find-from ) def
[ all? ] ( negate any? not ) def
[ none? ] ( any? not ) def
[ in? ] ( ( = ) curry any? ) def
[ equiv-in? ] ( ( == ) curry any? ) def

[ any ] ( any? ) mk-if-when-unless
[ all ] ( all? ) mk-if-when-unless
[ none ] ( none? ) mk-if-when-unless
[ in ] ( in? ) mk-if-when-unless
[ equiv-in ] ( equiv-in? ) mk-if-when-unless

#[ q1 q2 ... q3 ] n &&n applies each quote in a child stack on the top n items of the stack
# and returns the original child stack and true if all the quotes returned true, false otherwise
[ &&0 ] ( ( 2eval ) all? ) def
[ &&1 ] ( ( eval keep ) all? ) def
[ &&2 ] ( ( eval keep2 ) all? ) def
[ &&3 ] ( ( eval keep3 ) all? ) def
[ &&4 ] ( ( eval keep4 ) all? ) def
[ &&n ] ( ( eval keepn ) [ 1 ] put all? ) def

# similar but for at least one truth value
[ ||0 ] ( ( 2eval ) any? ) def
[ ||1 ] ( ( eval keep ) any? ) def
[ ||2 ] ( ( eval keep2 ) any? ) def
[ ||3 ] ( ( eval keep3 ) any? ) def
[ ||4 ] ( ( eval keep4 ) any? ) def
[ ||n ] ( ( eval ) take ( keepn ) compose any? ) def

#'ncleave' operates on a stack with a=n, b=1, c=(# of quotes in child stack)
#'nspread' operates on a stack with a=n, b=(# of quotes in child stack), c=1
[ cleave ] ( ( eval keep ) each drop ) def
[ 2cleave ] ( ( eval keep2 ) each drop2 ) def
[ 3cleave ] ( ( eval keep3 ) each drop3 ) def
[ 4cleave ] ( ( eval keep4 ) each drop4 ) def
[ ncleave ] ( ( ( deep keepn ) curry each ) ( dropn ) bi ) def

[ spread-operator ] ( ( eval ) ( ( ( dip ) curry ) dip eval-operator compose ) map-reduce ) def
[ 2spread-operator ] ( ( eval ) ( ( ( 2dip ) curry ) dip eval-operator comppose ) map-reduce ) def
[ 3spread-operator ] ( ( eval ) ( ( ( 3dip ) curry ) dip eval-operator compose ) map-reduce ) def
[ 4spread-operator ] ( ( eval ) ( ( ( 4dip ) curry ) dip eval-operator compose ) map-reduce ) def
[ nspread-operator ] ( ( eval ) ( ( ( mdip ) curry2 ) curry dip eval-operator compose ) with map-reduce ) def
[ spread ] ( ( drop ) ( spread-operator eval ) if-empty ) def
[ 2spread ] ( ( drop ) ( 2spread-operator eval ) if-empty ) def
[ 3spread ] ( ( drop ) ( 3spread-operator eval ) if-empty ) def
[ 4spread ] ( ( drop ) ( 4spread-operator eval ) if-empty ) def
[ nspread ] ( ( drop ) ( nspread-operator eval ) with if-empty ) def

#'[ l ] [ m ] call'        operates on a stack with a=1, b=l, c=m,
#'[ l ] [ m ] [ n ] ncall' operates on a stack with a=n, b=l, c=m,
[ call ] ( ( quoten ( cleave ) curry push ) curry [ ] spin times spread ) def
[ 2call ] ( ( quoten ( cleave2 ) curry push ) curry [ ] spin times spread ) def
[ 3call ] ( ( quoten ( cleave3 ) curry push ) curry [ ] spin times spread ) def
[ 4call ] ( ( quoten ( cleave4 ) curry push ) curry [ ] spin times spread ) def
[ ncall ] (
  ( cleaven ) curry ( quoten ) take ( curry push ) compose curry
  [ ] spin times spread
) def

#'[ l ] [ m ] apply'        operates on a stack with a=1, b=l, c=m, and multiplies the set of quotes by l,
#'[ l ] [ m ] [ n ] napply' operates on a stack with a=n, b=l, c=m, and multiplies the set of quotes by l.
[ apply ] ( ( quoten ( cleave ) curry ) curry dip ( -- dupn ) ( quoten ) bi spread ) def
[ 2apply ] ( ( quoten ( cleave2 ) curry ) curry dip ( -- dupn ) ( quoten ) bi spread ) def
[ 3apply ] ( ( quoten ( cleave3 ) curry ) curry dip ( -- dupn ) ( quoten ) bi spread ) def
[ 4apply ] ( ( quoten ( cleave4 ) curry ) curry dip ( -- dupn ) ( quoten ) bi spread ) def
[ napply ] (
  ( cleave ) curry ( quoten ) take ( curry ) compose
  curry dip ( -- dupn ) ( quoten ) bi spread
) def

[ interleave ] (
  ( empty? ) 2dig
  ( drop3 ) ( dup ( swap compose ( 1split* ) dig ( each ) dip ) dip eval ) if
) def

[ flip ] ( [ ] ( swap compose ) reduce ) def
[ sep ] ( size uncomposed quoten ) def
[ unsep ] ( size evald -- composen ) def
[ join ] ( [ ] -rot ( compose ) ( curry ) ( interleave ) bi swap prepose ) def
[ follow ] (
  [ ] (
    ( pick isword ( dup ) ( t ) if composed ) dig
    ( dot dup eval ) ( drop nip2 ) if
  ) dup eval but-last
) def
[ nweave ] ( ( quoten ) curry do dip ( join eval ) keep eval ) def

[ case ] (
  unpush ( swap dup ) dip
  ( ( ( eval drop ) take ( = ) compose find swap ) dig ) dig
  ( drop2 last nip eval2 ) (
    size one?
    ( nip dip drop ) (
      nipd dip swapd =
      ( eval ) ( drop2 [ "NO CASE" ] ethrow ) if
    ) if
  ) if
) def

# example of combinator power: complete expand
# (checks for definitions within child first without copying hashtables)
#
# legacy:
[ expand ] (
  size pos? ( stack? ) ( return ) if
  macro swap (
    macro (
      ( size dup pos? ) 2dig
      ( ( ( -- dup ( vat ) dip swap ( del ) dip ) dip compose ) dip dup eval )
      ( drop dropd )
      if
    ) dup eval ( (
        one split (
          isword (
            compose cd dup isdef
            ( unglue pop )
            ( pop dup isdef ( unglue ) ( ) if )
            if
          ) ( ) if
          swapd compose swap
        ) dip
        size pos?
      ) dig
      ( dup eval ) ( drop2 swap compose ) if
    ) dup eval
  ) ( (
      1split
      ( isword ( dup isdef ( unglue ) ( ) if ) ( ) if compose ) dip
      size pos? ( 4pick eval ) ( ) if
    ) dup -rotd eval drop dropd
  ) if
) def
#
# with combinators:
[ expand-unglue ] ( ( dup ( unglue ) when-def ) when-word ) def
[ expand-stack-one ] ( cd expand-unglue pop expand-unglue ) def
[ expand-unknown ] ( ( 0split push expand-stack-one nip ) ( expand-unglue ) if-stack ) def
[ 2expand-unknown ] (
  ( ( push expand-stack-one ) ( cd expand-unknown pop expand-unglue push ) if-word )
  ( ( expand-unglue ) ( eval expand-unknown quote ) if-word )
  if-stack
) def
[ expand ] ( type swap (( expand-unknown )) map swap cast ) def
[ 2expand ] ( type swap (( 2expand-unknown )) map swap cast ) def
