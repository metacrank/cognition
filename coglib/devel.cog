comment.cog load

# example of more (unnecessary) baremetal code
2crank ing 1 crank # recursive baremetal factorial program:
2crank ing 1 crank #( dup [ 0 ] > ( dup [ 9 ] + factorial * ) ( drop [ 1 ] ) if )
2crank ing 0 crank factorial dup
2crank ing 2 crank 0 quote compose eval > compose
2crank ing 2 crank dup nop 9 quote compose eval + compose factorial compose * compose
2crank ing 1 crank VMACRO cast quote compose
2crank ing 3 crank drop 1 quote
2crank ing 1 crank compose VMACRO cast quote compose
2crank ing 2 crank if compose
2crank ing 1 crank VMACRO cast def
2crank ing 1 crank
2crank ing 1 crank # a word that checks whether 'verbose' was the first arg
2crank ing 0 crank verbose-yes getargs
2crank ing 2 crank size compose 2 quote compose eval > compose
2crank ing 2 crank 2 quote split compose swap compose drop compose 1 quote compose eval split compose drop compose
2crank ing 1 crank quote compose
2crank ing 2 crank drop nop not-verbose quote
2crank ing 1 crank compose quote compose
2crank ing 2 crank if compose verbose quote compose eval = compose
2crank ing 1 crank def
2crank ing 1 crank
2crank ing 1 crank # prints 18 factorial if "verbose" was passed
2crank ing 1 crank verbose-yes 18!= quote
2crank ing 2 crank 18 quote compose eval factorial compose compose compose print compose endl compose print compose
2crank ing 1 crank 1 crank stack if

quote.cog load

# test quote functionality
verbose-yes [
  [ [[ help nop ]] nop (( nop ( nop ) )) {{ nop { child } }} ] .
  { child [[ nop ]] {{ nop }} (( nop )) { nop } } .
  {{ hello nop [ world ] }} .
] [ ] if

# for the sake of syntax highlighting: "

# reimplementations using quotes
[ factorial ] ( dup 0 > ( dup 9 + factorial * ) ( drop [ 1 ] ) if ) def
[ verbose-yes ] [ getargs size [ 2 ] >
                  [ [ 2 ] split swap drop [ 1 ] split drop ]
                  [ drop [ not-verbose ] ]
                  if
                  [ verbose ] = ] def

# useful io words
[ space ] ( spc print ) def
[ newline ] [ endl print ] def

verbose-yes [
  # strings and comments work inside quotes!
  "The factorial of 13 is: " print
  13 factorial print newline
  "Auto-expanding quotes can be manipulated with strings:" print newline
  ( this is a macro "macro" ) .
  {{ expanded child "child" [[ "quote" ]] }} .
] [ ] if
