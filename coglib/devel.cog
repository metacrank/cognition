2crank ing 0 crank ff 1
2crank ing 1 crank cut unaliasf
2crank ing 0 crank 0
2crank ing 1 crank cut swap quote def
2crank ing 1 crank
2crank ing 1 crank #
2crank ing 0 crank geti getd gets crankbase f d f i endl s
2crank ing 1 crank compose compose compose compose compose compose compose compose compose
2crank ing 0 crank drop halt crank s d i
2crank ing 1 crank compose compose compose compose compose VMACRO cast quote compose
2crank ing 0 crank halt 1 quote ing 1 quote ing metacrank
2crank ing 1 crank compose compose compose compose VMACRO cast
2crank ing 1 crank def
2crank ing 2 crank # singlet # delim
2crank ing 1 crank #comment: geti getd gets crankbase '' d '' i '\n' s ( drop halt crank s d i ) halt 1 1 metacrank

# example of more (unnecessary) baremetal code
2crank ing 1 crank # recursive baremetal factorial program:
2crank ing 1 crank #( dup [ 0 ] > ( dup [ 9 ] + factorial * ) ( drop [ 1 ] ) if )
2crank ing 0 crank factorial dup
2crank ing 2 crank 0 quote compose eval > compose
2crank ing 2 crank dup nop 9 quote compose eval + compose factorial compose * compose
2crank ing 1 crank VMACRO cast quote compose
2crank ing 2 crank drop nop 1 quote
2crank ing 1 crank compose VMACRO cast quote compose
2crank ing 2 crank if compose
2crank ing 1 crank VMACRO cast def
2crank ing 1 crank
2crank ing 1 crank # a word that checks whether 'verbose' was the first arg
2crank ing 0 crank verbose-yes getargs
2crank ing 2 crank size compose 2 quote compose eval > compose
2crank ing 2 crank 2 quote split compose swap compose drop compose 1 quote compose eval split compose drop compose
2crank ing 1 crank quote compose
2crank ing 2 crank drop nop not-verbose quote
2crank ing 1 crank compose quote compose
2crank ing 2 crank if compose verbose quote compose eval = compose
2crank ing 1 crank def
2crank ing 1 crank
2crank ing 1 crank # prints 18 factorial if "verbose" was passed
2crank ing 1 crank verbose-yes "18!=" quote
2crank ing 2 crank 18 quote compose eval factorial compose compose compose print compose endl compose print compose
2crank ing 1 crank 1 crank stack if

quote.cog load

# basic string (without escape characters)
[ " ]
( getd gets geti f d \ " s f i
  ( len [ 1 ] - cut drop swap i swap s swap d halt [ 1 ] crank )
  halt [ 1 ] [ 1 ] metacrank ) def
[ " ] singlet

# for the sake of syntax highlighting: "

# reimplement comment:
[ # ]
( geti getd gets crankbase f d f i endl s
  ( drop halt crank s d i )
  halt [ 1 ] [ 1 ] metacrank )
def

# reimplementation using quotes
[ factorial ] ( dup 0 > ( dup 9 + factorial * ) ( drop 1 ) if ) def
[ verbose-yes ] [ getargs size [ 2 ] >
                  [ [ 2 ] split swap drop [ 1 ] split drop ]
                  [ drop [ not-verbose ] ]
                  if
                  [ verbose ] = ] def

[ space ] ( spc print ) def
[ newline ] [ endl print ] def

# strings sometimes work inside quotes!
verbose-yes [
  "The_factorial_of_13_is:_" print
  13 factorial print
] [  ] if
