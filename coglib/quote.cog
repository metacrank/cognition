2crank ing 2 crank comment.cog load
2crank ing 0 crank
2crank ing 1 crank # preliminary escape character \
2crank ing 1 crank \
2crank ing 0 crank halt 1 quote ing crank
2crank ing 1 crank compose compose
2crank ing 2 crank VMACRO cast quote eval
2crank ing 0 crank halt 1 quote ing dup ing metacrank
2crank ing 1 crank compose compose compose compose
2crank ing 2 crank VMACRO cast
2crank ing 1 crank def
2crank ing 0 crank
2crank ing 0 crank
2crank ing 1 crank # [ === crankbase [ 1 ] metacrankbase dup [ 1 ] =
2crank ing 1 crank # [ ( meta-crank-stuff0 ) ]
2crank ing 1 crank # [ ( meta-crank-stuff1 ) ]
2crank ing 1 crank # if dup stack swap
2crank ing 1 crank # [ 0 ] crank [ 1 ] [ 1 ] metacrank
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff0 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank
2crank ing 1 crank # quote compose [ dup ] dip swap ) ( compose ( dup ) dip swap ) if
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff1 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank )
2crank ing 1 crank # ( compose [ dup ] dip swap ) if
2crank ing 0 crank
2crank ing 1 crank # declaration
2crank ing 0 crank [
2crank ing 0 crank
2crank ing 1 crank # init
2crank ing 0 crank crankbase 1 quote ing metacrankbase dup 1 quote ing =
2crank ing 1 crank compose compose compose compose compose
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff0
2crank ing 3 crank dup ] quote =
2crank ing 1 crank compose compose
2crank ing 16 crank drop swap drop swap 1 quote swap metacrank swap crank quote
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose compose compose compose compose compose
2crank ing 1 crank compose compose compose compose compose \ VMACRO cast quote compose
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose \ VMACRO cast quote compose \ if compose
2crank ing 1 crank \ VMACRO cast quote quote compose
2crank ing 0 crank
2crank ing 1 crank # meta-crank-stuff1
2crank ing 3 crank dup ] quote =
2crank ing 1 crank compose compose
2crank ing 16 crank drop swap drop swap 1 quote swap metacrank swap crank
2crank ing 1 crank compose compose compose compose compose compose compose compose \ VMACRO cast quote compose
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose \ VMACRO cast quote compose \ if compose
2crank ing 1 crank \ VMACRO cast quote quote compose
2crank ing 0 crank
2crank ing 1 crank # rest of the definition
2crank ing 16 crank if dup stack swap 0 quote crank
2crank ing 2 crank 1 quote 1 quote metacrank
2crank ing 1 crank compose compose compose compose compose compose compose compose
2crank ing 1 crank compose \ VMACRO cast
2crank ing 0 crank
2crank ing 1 crank def

# [ === crankbase [ 1 ] metacrankbase dup [ 1 ] =
# [ ( meta-crank-stuff0 ) ]
# [ ( meta-crank-stuff1 ) ]
# if dup stack swap
# [ 0 ] crank [ 1 ] [ 1 ] metacrank

# meta-crank-stuff0 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank
# quote compose [ dup ] dip swap )
# ( dup dup dup '[' = swap '(' = or swap '\' = or [ eval ] ( compose [ dup ] dip swap ) if ) if

# meta-crank-stuff1 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank )
# ( dup dup dup '[' = swap '(' = or swap '\' = or [ eval ] ( compose [ dup ] dip swap ) if ) if

\ [

[ crankbase ] [ 1 ] quote compose [ metacrankbase dup ] compose [ 1 ] quote compose [ = ] compose

[ dup ] \ ] quote compose [ = ] compose
[ drop swap drop swap ] [ 1 ] quote compose [ swap metacrank swap crank quote compose ] compose
[ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose
[ dup dup dup ] \ [ quote compose [ = swap ] compose \ ( quote compose [ = or swap ] compose \ \ quote compose [ = or ] compose
[ eval ] quote compose
[ compose ] [ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose [ if ] compose \ VMACRO cast
quote compose [ if ] compose \ VMACRO cast quote quote

[ dup ] \ ] quote compose [ = ] compose
[ drop swap drop swap ] [ 1 ] quote compose [ swap metacrank swap crank ] compose \ VMACRO cast quote compose
[ dup dup dup ] \ [ quote compose [ = swap ] compose \ ( quote compose [ = or swap ] compose \ \ quote compose [ = or ] compose
[ eval ] quote compose
[ compose ] [ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose [ if ] compose \ VMACRO cast
quote compose [ if ] compose \ VMACRO cast quote quote

compose compose [ if dup stack swap ] compose [ 0 ] quote compose [ crank ] compose
[ 1 ] quote dup compose compose [ metacrank ] compose \ VMACRO cast

def

# \ === [ 1 ] metacrankbase [ 1 ] =
# [ ( halt [ 1 ] [ 1 ] metacrank quote compose [ dup ] dip swap ) ]
# [ ( halt [ 1 ] crank ) ]
# if halt [ 1 ] [ 1 ] metacrank
\ \
[ [ 1 ] metacrankbase [ 1 ] = ]
[ halt [ 1 ] [ 1 ] metacrank quote compose [ dup ] dip swap ]
\ VMACRO cast quote quote compose
[ halt [ 1 ] crank ] VMACRO cast quote quote compose
[ if halt [ 1 ] [ 1 ] metacrank ] compose \ VMACRO cast
def

# macro quote declaration
\ (
\ [ unglue
[ 11 ] split swap [ 10 ] split drop [ macro ] compose
[ 18 ] split quote [ prepose ] compose dip
[ 17 ] split eval eval
[ 1 ] del [ \ ) ] [ 1 ] put
quote quote quote [ prepose ] compose dip
[ 16 ] split eval eval
[ 1 ] del [ \ ) ] [ 1 ] put
quote quote quote [ prepose ] compose dip
prepose
def

# redefine macro quote to automatically expand
\ (
( crankbase [ 1 ] metacrankbase dup [ 1 ] =
  [ ( dup \ ) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose ( dup ) dip swap )
      ( dup dup dup \ [ = swap \ ( = or swap \ \ = or
        ( eval )
        ( dup isdef ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  [ ( dup \ ) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank )
      ( dup dup dup \ [ = swap \ ( = or swap \ \ = or
        ( eval )
        ( dup isdef ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  if dup macro swap
  [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

# factor out common definitions
[ lquote-addon ] ( compose ( dup ) dip swap ) def
[ lquote-init ] ( crankbase [ 1 ] metacrankbase dup [ 1 ] = ) def
[ rquote-end1 ] ( drop swap drop swap [ 1 ] swap metacrank swap crank ) def
[ rquote-end0 ] ( rquote-end1 quote compose ( dup ) dip swap ) def
[ lquote-prebody ] ( dup dup dup dup dup dup dup dup dup
                     \ [ = swap \ ( = or swap \ \ = or swap \ [[ = or swap \ (( = or swap \ { = or swap \ {{ = or swap \ # = or swap \ " = or ) def
[ lquote-body ] ( lquote-prebody ( eval ) ( lquote-addon ) if ) def
[ lquote-ebody ] ( lquote-prebody ( eval ) ( dup isdef ( unglue ) ( ) if lquote-addon ) if ) def
[ lquote-end ] ( swap [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

# (re)define all quotes

\ [  ( lquote-init
       [ ( dup \ ] = ( rquote-end0 ) ( lquote-body ) if ) ]
       [ ( dup \ ] = ( rquote-end1 ) ( lquote-body ) if ) ]
       if dup [ ] lquote-end ) def

\ (  ( lquote-init
       [ ( dup \ ) = ( rquote-end0 ) ( lquote-ebody ) if ) ]
       [ ( dup \ ) = ( rquote-end1 ) ( lquote-ebody ) if ) ]
       if dup ( ) lquote-end ) def

\ [[ ( lquote-init
       [ ( dup \ ]] = ( rquote-end0 ) ( lquote-ebody ) if ) ]
       [ ( dup \ ]] = ( rquote-end1 ) ( lquote-ebody ) if ) ]
       if dup [ ] lquote-end ) def

\ (( ( lquote-init
       [ ( dup \ )) = ( rquote-end0 ) ( lquote-body ) if ) ]
       [ ( dup \ )) = ( rquote-end1 ) ( lquote-body ) if ) ]
       if dup ( ) lquote-end ) def

\ {  ( lquote-init
       [ ( dup \ } = ( rquote-end0 ) ( lquote-body ) if ) ]
       [ ( dup \ } = ( rquote-end1 ) ( lquote-body ) if ) ]
       if dup child lquote-end ) def

\ {{ ( lquote-init
       [ ( dup \ }} = ( rquote-end0 ) ( lquote-ebody ) if ) ]
       [ ( dup \ }} = ( rquote-end1 ) ( lquote-ebody ) if ) ]
       if dup child lquote-end ) def

# undefine no-longer-needed factors
[ lquote-addon ] undef
[ lquote-init ] undef
[ rquote-end0 ] undef
[ rquote-end1 ] undef
[ lquote-prebody ] undef
[ lquote-body ] undef
[ lquote-ebody ] undef
[ lquote-end ] undef

# better escape character (note: different behaviour inside quotes than before)
\ \
( [ 1 ] metacrankbase [ 1 ] =
  [ ( compose ( dup ) dip swap ) ]
  [ ( halt [ 1 ] crank ) ]
  if halt [ 1 ] [ 1 ] metacrank ) def

# reimplement comment:
\ #
( geti getd gets crankbase f d f i endl s
  [ 1 ] metacrankbase [ 1 ] =
  [ ( drop crank s d i ( dup ) dip swap ) ]
  [ ( drop halt crank s d i ) ]
  if
  halt [ 1 ] [ 1 ] metacrank )
def

# basic string (without escape characters)
\ "
( getd gets geti f d [ \ " ] s f i
  [ 1 ] metacrankbase [ 1 ] =
  [ ( len [ 1 ] - cut drop swap i swap s swap d quote compose ( dup ) dip swap ) ]
  [ ( len [ 1 ] - cut drop swap i swap s swap d halt [ 1 ] crank ) ]
  if
  halt [ 1 ] [ 1 ] metacrank ) def
\ " singlet
