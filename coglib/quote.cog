2crank ing 1 crank # preliminary escape character \
2crank ing 1 crank \
2crank ing 0 crank halt 1 quote ing crank
2crank ing 1 crank compose compose VMACRO cast quote
2crank ing 0 crank halt 1 quote ing 1 quote ing metacrank
2crank ing 1 crank compose compose compose compose VMACRO cast
2crank ing 1 crank def
2crank ing 1 crank
2crank ing 1 crank
2crank ing 1 crank # [ === crankbase [ 1 ] metacrankbase dup [ 1 ] =
2crank ing 1 crank # [ ( meta-crank-stuff0 ) ]
2crank ing 1 crank # [ ( meta-crank-stuff1 ) ]
2crank ing 1 crank # if dup stack swap
2crank ing 1 crank # [ 0 ] crank [ 1 ] [ 1 ] metacrank
2crank ing 1 crank
2crank ing 1 crank # meta-crank-stuff0 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank
2crank ing 1 crank # quote compose [ dup ] dip swap ) ( compose ( dup ) dip swap ) if
2crank ing 1 crank
2crank ing 1 crank # meta-crank-stuff1 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank )
2crank ing 1 crank # ( compose [ dup ] dip swap ) if
2crank ing 1 crank
2crank ing 1 crank # declaration
2crank ing 0 crank [
2crank ing 1 crank
2crank ing 1 crank # init
2crank ing 0 crank crankbase 1 quote ing metacrankbase dup 1 quote ing =
2crank ing 1 crank compose compose compose compose compose
2crank ing 1 crank
2crank ing 1 crank # meta-crank-stuff0
2crank ing 3 crank dup ] quote =
2crank ing 1 crank compose compose
2crank ing 16 crank drop swap drop swap 1 quote swap metacrank swap crank quote
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose compose compose compose compose compose
2crank ing 1 crank compose compose compose compose compose \ VMACRO cast quote compose
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose \ VMACRO cast quote compose \ if compose
2crank ing 1 crank \ VMACRO cast quote quote compose
2crank ing 1 crank
2crank ing 1 crank # meta-crank-stuff1
2crank ing 3 crank dup ] quote =
2crank ing 1 crank compose compose
2crank ing 16 crank drop swap drop swap 1 quote swap metacrank swap crank
2crank ing 1 crank compose compose compose compose compose compose compose compose \ VMACRO cast quote compose
2crank ing 3 crank compose dup quote dip swap
2crank ing 1 crank compose compose compose \ VMACRO cast quote compose \ if compose
2crank ing 1 crank \ VMACRO cast quote quote compose
2crank ing 1 crank
2crank ing 1 crank # rest of the definition
2crank ing 16 crank if dup stack swap 0 quote crank
2crank ing 2 crank 1 quote 1 quote metacrank
2crank ing 1 crank compose compose compose compose compose compose compose compose
2crank ing 1 crank compose \ VMACRO cast
2crank ing 1 crank
2crank ing 1 crank def
2crank ing 1 crank

# [ === crankbase [ 1 ] metacrankbase dup [ 1 ] =
# [ ( meta-crank-stuff0 ) ]
# [ ( meta-crank-stuff1 ) ]
# if dup stack swap
# [ 0 ] crank [ 1 ] [ 1 ] metacrank

# meta-crank-stuff0 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank
# quote compose [ dup ] dip swap )
# ( dup dup dup '[' = swap '(' = or swap '\' = or [ eval ] ( compose [ dup ] dip swap ) if ) if

# meta-crank-stuff1 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank )
# ( dup dup dup '[' = swap '(' = swap '\' = or or [ eval ] ( compose [ dup ] dip swap ) if ) if

\ [

[ crankbase ] [ 1 ] quote compose [ metacrankbase dup ] compose [ 1 ] quote compose [ = ] compose

[ dup ] \ ] quote compose [ = ] compose
[ drop swap drop swap ] [ 1 ] quote compose [ swap metacrank swap crank quote compose ] compose
[ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose
[ dup dup dup ] \ [ quote compose [ = swap ] compose \ ( quote compose [ = or swap ] compose \ \ quote compose [ = or ] compose
[ eval ] quote compose
[ compose ] [ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose [ if ] compose \ VMACRO cast
quote compose [ if ] compose \ VMACRO cast quote quote

[ dup ] \ ] quote compose [ = ] compose
[ drop swap drop swap ] [ 1 ] quote compose [ swap metacrank swap crank ] compose \ VMACRO cast quote compose
[ dup dup dup ] \ [ quote compose [ = swap ] compose \ ( quote compose [ = or swap ] compose \ \ quote compose [ = or ] compose
[ eval ] quote compose
[ compose ] [ dup ] quote compose [ dip swap ] compose \ VMACRO cast quote compose [ if ] compose \ VMACRO cast
quote compose [ if ] compose \ VMACRO cast quote quote

compose compose [ if dup stack swap ] compose [ 0 ] quote compose [ crank ] compose
[ 1 ] quote dup compose compose [ metacrank ] compose \ VMACRO cast

def

# \ === [ 1 ] metacrankbase [ 1 ] =
# [ ( halt [ 1 ] [ 1 ] metacrank quote compose [ dup ] dip swap ) ]
# [ ( halt [ 1 ] crank ) ]
# if halt [ 1 ] [ 1 ] metacrank
\ \
[ [ 1 ] metacrankbase [ 1 ] = ]
[ halt [ 1 ] [ 1 ] metacrank quote compose [ dup ] dip swap ] \ VMACRO cast quote quote compose
[ halt [ 1 ] crank ] VMACRO cast quote quote compose
[ if halt [ 1 ] [ 1 ] metacrank ] compose \ VMACRO cast
def

# macro quote declaration
\ (
\ [ unglue
[ 11 ] split swap [ 10 ] split drop [ macro ] compose
[ 18 ] split quote [ prepose ] compose dip
[ 17 ] split eval eval
[ 1 ] del [ \ ) ] [ 1 ] put
quote quote quote [ prepose ] compose dip
[ 16 ] split eval eval
[ 1 ] del [ \ ) ] [ 1 ] put
quote quote quote [ prepose ] compose dip
prepose
def

# redefine macro quote to automatically expand
\ (
( crankbase [ 1 ] metacrankbase dup [ 1 ] =
  [ ( dup \ ) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose ( dup ) dip swap )
      ( dup dup dup \ [ = swap \ ( = or swap \ \ = or
        ( eval )
        ( dup isdef ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  [ ( dup \ ) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank )
      ( dup dup dup \ [ = swap \ ( = or swap \ \ = or
        ( eval )
        ( dup isdef ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  if dup macro swap
  [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

# (re)define all quotes
\ [
( crankbase [ 1 ] metacrankbase dup [ 1 ] =
  [ ( dup \ ] =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose ( dup ) dip swap )
      ( dup dup dup dup dup dup dup
        \ [ = swap \ ( = or swap \ \ = or swap \ [[ = or swap \ (( = or swap \ { = or swap \ {{ = or
        ( eval ) ( compose ( dup ) dip swap ) if )
      if ) ]
  [ ( dup \ ] =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank )
      ( dup dup dup dup dup dup dup
        \ [ = swap \ ( = or swap \ \ = or swap \ [[ = or swap \ (( = or swap \ { = or swap \ {{ = or
        ( eval ) ( compose ( dup ) dip swap ) if )
      if ) ]
  if dup stack swap
  [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

\ (
( crankbase [ 1 ] metacrankbase dup [ 1 ] =
  [ ( dup \ ) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose ( dup ) dip swap )
      ( dup dup dup dup dup dup dup
        \ [ = swap \ ( = or swap \ \ = or swap \ [[ = or swap \ (( = or swap \ { = or swap \ {{ = or
        ( eval )
        ( dup isdef ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  [ ( dup \ ) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank )
      ( dup dup dup dup dup dup dup
        \ [ = swap \ ( = or swap \ \ = or swap \ [[ = or swap \ (( = or swap \ { = or swap \ {{ = or
        ( eval )
        ( dup isdef ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  if dup macro swap
  [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

\ [[
( crankbase [ 1 ] metacrankbase dup [ 1 ] =
  [ ( dup \ ]] =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose ( dup ) dip swap )
      ( dup dup dup dup dup dup dup
        \ [ = swap \ ( = or swap \ \ = or swap \ [[ = or swap \ (( = or swap \ { = or swap \ {{ = or
        ( eval )
        ( dup isdef ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  [ ( dup \ ]] =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank )
      ( dup dup dup dup dup dup dup
        \ [ = swap \ ( = or swap \ \ = or swap \ [[ = or swap \ (( = or swap \ { = or swap \ {{ = or
        ( eval )
        ( dup isdef ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  if dup stack swap
  [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

\ ((
( crankbase [ 1 ] metacrankbase dup [ 1 ] =
  [ ( dup \ )) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose ( dup ) dip swap )
      ( dup dup dup dup dup dup dup
        \ [ = swap \ ( = or swap \ \ = or swap \ [[ = or swap \ (( = or swap \ { = or swap \ {{ = or
        ( eval ) ( compose ( dup ) dip swap ) if )
      if ) ]
  [ ( dup \ )) =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank )
      ( dup dup dup dup dup dup dup
        \ [ = swap \ ( = or swap \ \ = or swap \ [[ = or swap \ (( = or swap \ { = or swap \ {{ = or
        ( eval ) ( compose ( dup ) dip swap ) if )
      if ) ]
  if dup macro swap
  [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

\ {
( crankbase [ 1 ] metacrankbase dup [ 1 ] =
  [ ( dup \ } =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose ( dup ) dip swap )
      ( dup dup dup dup dup dup dup
        \ [ = swap \ ( = or swap \ \ = or swap \ [[ = or swap \ (( = or swap \ { = or swap \ {{ = or
        ( eval ) ( compose ( dup ) dip swap ) if )
      if ) ]
  [ ( dup \ } =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank )
      ( dup dup dup dup dup dup dup
        \ [ = swap \ ( = or swap \ \ = or swap \ [[ = or swap \ (( = or swap \ { = or swap \ {{ = or
        ( eval ) ( compose ( dup ) dip swap ) if )
      if ) ]
  if dup child swap
  [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

\ {{
( crankbase [ 1 ] metacrankbase dup [ 1 ] =
  [ ( dup \ }} =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank quote compose ( dup ) dip swap )
      ( dup dup dup dup dup dup dup
        \ [ = swap \ ( = or swap \ \ = or swap \ [[ = or swap \ (( = or swap \ { = or swap \ {{ = or
        ( eval )
        ( dup isdef ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  [ ( dup \ }} =
      ( drop swap drop swap [ 1 ] swap metacrank swap crank )
      ( dup dup dup dup dup dup dup
        \ [ = swap \ ( = or swap \ \ = or swap \ [[ = or swap \ (( = or swap \ { = or swap \ {{ = or
        ( eval )
        ( dup isdef ( unglue ) [ ] if compose ( dup ) dip swap )
        if )
      if ) ]
  if dup child swap
  [ 0 ] crank [ 1 ] [ 1 ] metacrank ) def

# better escape character
\ \
( [ 1 ] metacrankbase [ 1 ] =
  [ ( halt [ 1 ] [ 1 ] metacrank quote compose ( dup ) dip swap ) ]
  [ ( halt [ 1 ] crank ) ]
  if halt [ 1 ] [ 1 ] metacrank ) def

# define basic expand ( doesn't check for definitions within quotes themselves )
[ expand ]
( size [ 0 ] = ( return ) ( ) if [ 0 ] split
  ( [ 1 ] split
    ( isstring ( dup isdef ( unglue ) ( ) if ) ( ) if compose ) dip
    size [ 0 ] > ( ( ( dup ) dip swap ) dip swap eval ) ( ) if )
  dup ( swap ( swap ) dip ) dip eval drop swap drop ) def

# better expand (still slightly unoptimal because in theory it copies more hashtables than it needs to)
[ expand ]
( type [ VSTACK ] =
  ( size [ 0 ] = ( return ) ( ) if [ 0 ] split
    ( [ 1 ] split
      ( isstring ( dup ( ( size split ) dip compose cd isdef pop ) dip swap ( compose cd unglue uncd eval ) ( swap drop dup isdef ( unglue ) ( ) if ) if ) ( ) if compose ) dip
      size [ 0 ] > ( ( ( dup ) dip swap ) dip swap eval ) ( ) if )
    dup ( swap ( swap ) dip ) dip eval drop swap drop )
  ( expand )
  if ) def

# test quote functionality
verbose-yes [
  [ [[ help nop ]] nop (( nop ( nop ) )) {{ nop { child } }} ] .
  { child [[ nop ]] {{ nop }} (( nop )) { nop } } .
  {{ hello nop [ world ] }} .
] [ ] if
