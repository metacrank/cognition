2crank ing 1 crank # [ === crankbase [ 1 ] metacrankbase dup [ 1 ] =
2crank ing 1 crank # [ ( meta-crank-stuff0 ) ]
2crank ing 1 crank # [ ( meta-crank-stuff1 ) ]
2crank ing 1 crank # if dup stack swap
2crank ing 1 crank # [ 0 ] crank [ 1 ] [ 1 ] metacrank
2crank ing 1 crank
2crank ing 1 crank # meta-crank-stuff0 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank
                    # quote compose ( dup ) dip swap )
2crank ing 1 crank # ( dup '[' = ( drop '[' ) ( dup '(' = ( drop '(' ) ( compose ( dup ) dip swap ) if ) if ) if
2crank ing 1 crank
2crank ing 1 crank # meta-crank-stuff1 === dup ']' = ( drop swap drop swap [ 1 ] swap metacrank swap crank )
2crank ing 1 crank # ( dup '[' = ( drop '[' ) ( dup '(' = ( drop '(' ) ( compose ( dup ) dip swap ) if ) if ) if
2crank ing 1 crank
2crank ing 1 crank # declaration
2crank ing 3 crank [
2crank ing 1 crank
2crank ing 1 crank # init
2crank ing 2 crank crankbase unglue 1 push metacrankbase addon dup addon 1 push = addon
2crank ing 1 crank
2crank ing 1 crank # meta-crank-stuff0
2crank ing 2 crank dup unglue ] push = addon
2crank ing 1 crank
2crank ing 2 crank drop unglue swap addon drop addon swap addon 1 push swap addon
                   metacrank addon swap addon crank addon quote addon compose addon
2crank ing 3 crank dup
2crank ing 1 crank unglue quote compose
2crank ing 2 crank dip addon swap addon
2crank ing 1 crank quote compose
2crank ing 2 crank dup unglue [ push = addon
2crank ing 2 crank drop unglue [ compose
2crank ing 1 crank push
2crank ing 2 crank dup unglue ( push = addon
2crank ing 2 crank drop unglue ( compose
2crank ing 1 crank push
2crank ing 2 crank compose unglue
2crank ing 3 crank dup
2crank ing 1 crank unglue quote compose
2crank ing 2 crank dip addon swap addon
2crank ing 1 crank push
2crank ing 2 crank if addon
2crank ing 1 crank push
2crank ing 2 crank if addon
2crank ing 1 crank quote compose
2crank ing 2 crank if addon
2crank ing 1 crank quote
2crank ing 1 crank quote compose
2crank ing 1 crank
2crank ing 1 crank # meta-crank-stuff1
2crank ing 2 crank dup unglue ] push = addon
2crank ing 2 crank drop unglue swap addon drop addon swap addon 1 push swap addon
                   metacrank addon swap addon crank addon
2crank ing 1 crank quote compose
2crank ing 1 crank
2crank ing 2 crank dup unglue [ push = addon
2crank ing 2 crank drop unglue [ compose
2crank ing 1 crank push
2crank ing 2 crank dup unglue ( push = addon
2crank ing 2 crank drop unglue ( compose
2crank ing 1 crank push
2crank ing 2 crank compose unglue
2crank ing 3 crank dup
2crank ing 1 crank unglue quote compose
2crank ing 2 crank dip addon swap addon
2crank ing 1 crank push
2crank ing 2 crank if addon
2crank ing 1 crank push
2crank ing 2 crank if addon
2crank ing 1 crank quote compose
2crank ing 1 crank
2crank ing 2 crank if addon
2crank ing 1 crank quote
2crank ing 1 crank quote compose
2crank ing 1 crank
2crank ing 1 crank # rest of the definition
2crank ing 2 crank if addon dup addon stack addon swap addon
2crank ing 2 crank 0 push crank addon 1 push 1 push metacrank addon
2crank ing 1 crank
2crank ing 1 crank def
2crank ing 1 crank
2crank ing 1 crank # testing [
2crank ing 1 crank [ hello world [ hello! ] (successfully_nested) ]
2crank ing 1 crank verbose-yes [ . ] [ drop ] if
2crank ing 16 crank [ eval eval eval eval eval hello worlds (eval) ] six crank in still
2crank ing 1 crank verbose-yes [ print space print space print space print newline . ] [ drop drop drop drop drop ] if
2crank ing 16 crank [ ing hello worlds (ing) ] way: this works also
2crank ing 1 crank verbose-yes [ print space print space print space print newline . ] [ drop drop drop drop drop ] if
2crank ing 1 crank
2crank ing 1 crank
2crank ing 1 crank # macro quote declaration
2crank ing 0 crank (
2crank ing 1 crank
2crank ing 1 crank # copy '['
2crank ing 2 crank [ unglue
2crank ing 1 crank [ 11 ] split swap [ 10 ] split drop
2crank ing 2 crank macro addon
2crank ing 1 crank [ 18 ] split
2crank ing 1 crank [ prepose ] curry dip
2crank ing 1 crank [ 17 ] split eval eval
2crank ing 1 crank [ 1 ] del [ [ ) ] ] [ 1 ] put
2crank ing 1 crank quote quote
2crank ing 1 crank [ prepose ] curry dip
2crank ing 1 crank [ 16 ] split eval eval
2crank ing 1 crank [ 1 ] del [ [ ) ] ] [ 1 ] put
2crank ing 1 crank quote quote
2crank ing 1 crank [ prepose ] curry dip
2crank ing 1 crank prepose
2crank ing 1 crank
2crank ing 1 crank def
2crank ing 1 crank
2crank ing 1 crank # general testing
2crank ing 1 crank ( [ ( , ) ] ( . ) ( (hello) [ (world) ] ) )
2crank ing 1 crank verbose-yes [ [ general testing: ] spc 1 put endl compose endl prepose
                                 print . newline ] [ drop ] if
2crank ing 1 crank
2crank ing 1 crank
2crank ing 1 crank # child quotes { } inherit attributes from parent stack # copy '['
2crank ing 0 crank {
2crank ing 1 crank
2crank ing 1 crank # copy '['
2crank ing 2 crank [ unglue
2crank ing 1 crank [ 11 ] split swap [ 10 ] split drop
2crank ing 2 crank child addon
2crank ing 1 crank [ 18 ] split
2crank ing 1 crank [ prepose ] curry dip
2crank ing 1 crank [ 17 ] split eval eval
2crank ing 1 crank [ 1 ] del [ [ } ] ] [ 1 ] put
2crank ing 1 crank quote quote
2crank ing 1 crank [ prepose ] curry dip
2crank ing 1 crank [ 16 ] split eval eval
2crank ing 1 crank [ 1 ] del [ [ } ] ] [ 1 ] put
2crank ing 1 crank quote quote
2crank ing 1 crank [ prepose ] curry dip
2crank ing 1 crank prepose
2crank ing 1 crank
2crank ing 1 crank def
2crank ing 1 crank
2crank ing 1 crank
2crank ing 1 crank
2crank ing 1 crank # singular quote '\' quotes the next token
2crank ing 1 crank # useful for putting '[', '(', or '{' on the stack
2crank ing 0 crank \
2crank ing 1 crank
2crank ing 2 crank halt unglue 1 push crank addon
2crank ing 1 crank ( [ 0 ] ) curry
2crank ing 2 crank crank addon
2crank ing 1 crank ( [ 1 ] [ 1 ] ) compose
2crank ing 2 crank metacrank addon
2crank ing 1 crank
2crank ing 1 crank def
2crank ing 1 crank
