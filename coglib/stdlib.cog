2 crank quote.cog load
# Cognition Standard Library
# Apr. 2024

# math extension
[ ++ ] ( [ 1 ] + ) def
[ -- ] ( [ 1 ] - ) def
[ == ] ( dup ( swap dup ( <= ) dip ) dip <= and ) def
[ pos? ] ( [ 0 ] > ) def
[ neg? ] ( [ 0 ] < ) def
[ zero? ] ( [ 0 ] == ) def
[ non-neg? ] ( [ 0 ] >= ) def
[ non-pos? ] ( [ 0 ] <= ) def
[ one? ] ( [ 1 ] == ) def
[ two? ] ( [ 2 ] == ) def
[ three? ] ( [ 3 ] == ) def

# metastack extension
[ meta ] ( uncd quote cd reset ) def # ( qstack reset ) is less efficient but preserves root in chroots
[ parent ] ( qstack [ 1 ] crank ) def # qstack halt in baremetal environments

# error extension
[ ereturn ] ( ethrow return ) def

# crank-agnostic casting
[ >macro ] ( "VMACRO" cast ) def
[ >stack ] ( "VSTACK" cast ) def

[ macro? ] ( type "VMACRO" = ) def
[ stack? ] ( type "VSTACK" = ) def

# generating words
"genlib.cog" load

# stackops extension
[ drop ] mkopn
[ swap ] mkopn
[ dup ] mkopn
[ eval ] mkopn

[ nip ] dup ( swap drop ) defopn
[ deep ] dup ( swap dip ) defopn

[ 2spin ] ( swap ) defopd
[ 3spin ] ( swap 2spind swap ) defopd
[ 4spin ] ( swap 3spind swap ) defopd
#[ mspin ]

[ 2rot ] ( swap ) defopn
[ 3rot ] ( 2rotd swap ) defopn
[ 4rot ] ( 3rotd swap ) defopn
#[ mrot ]
[ -2rot ] ( swap ) defopn
[ -3rot ] ( swap -2rotd ) defopn
[ -4rot ] ( swap ) defopn
#[ -mrot ]

[ 1pick ] ( dup ) defopn
[ 2pick ] ( 1pickd swap ) defopn
[ 3pick ] ( 2pickd swap ) defopn
[ 4pick ] ( 3pickd swap ) defopn
#[ mpick ]

# alias stackops
[ dropd ] [ nip ] aliasn
[ dropt ] [ nipd ] aliasn
[ dropq ] [ nipt ] aliasn

[ evald ] [ deep ] aliasn
[ evalt ] [ deepd ] aliasn
[ evalq ] [ deept ] aliasn

[ spin ] ( 3spin ) defopd
[ rot ] ( 3rot ) defopn
[ -rot ] ( -3rot ) defopn
[ roll ] ( 4rot ) defopn
[ -roll ] ( -4rot ) defopn
[ pick ] ( 3pick ) defopn
[ reach ] ( 4pick ) defopn

# hashtable extension
[ def ] mkopn
[ undef ] mkopn
[ unglue ] mkopn

# combinators extension
"combinators.cog" load

# dup variants
[ 2dup ] ( 2quote ) [ do ] ( eval ) ( ( 2quote ) dip don eval ) mkbindopn
[ 2dup ] ( swap dup ( swap dup ) dip swap ) def mkopd # optimization
[ 3dup ] ( 3quote ) [ do ] ( eval ) [ 17 ] ( ( 3quote ) dip don eval ) mkbindopn
[ 4dup ] ( 4quote ) [ do ] ( eval ) [ 10 ] ( ( 4quote ) dip don eval ) mkbindopn

[ over ] ( dupd swap ) defopd
[ 2over ] ( ( ( swap dup ) dip swap ) do dip swap ) defopd
[ 3over ] ( ( quote curry2 do ) dip swap eval ) defopd
[ 4over ] ( ( quote curry3 do ) dip swap eval ) defopd

# strings extension
"string.cog" load

# math extension
[ factorial ] dup
( dup non-pos? ( [ 1 ] + ) ( dup [ 1 ] - factorial * ) if ) def
( [ 2 ] swap ++ interval [ 1 ] ( * ) reduce ) def

[ abs ] ( dup neg? [ neg ] when ) def
[ factor? ] ( / isint ) def
[ even? ] ( 2.0 factor? ) def
[ odd? ] ( even? not ) def
