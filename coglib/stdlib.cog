2 crank quote.cog load
# Cognition Standard Library
# Apr. 2024

# math extension
[ ++ ] ( [ 1 ] + ) def
[ -- ] ( [ 1 ] - ) def
[ == ] ( dup ( swap dup ( <= ) dip ) dip <= and ) def
[ pos? ] ( [ 0 ] > ) def
[ neg? ] ( [ 0 ] < ) def
[ zero? ] ( [ 0 ] == ) def
[ non-neg? ] ( [ 0 ] >= ) def
[ non-pos? ] ( [ 0 ] <= ) def
[ one? ] ( [ 1 ] == ) def
[ two? ] ( [ 2 ] == ) def
[ three? ] ( [ 3 ] == ) def

# metastack extension
[ meta ] ( uncd quote cd reset ) def # ( qstack reset ) is less efficient but preserves root in chroots
[ parent ] ( qstack [ 1 ] crank ) def # qstack halt in baremetal environments

# error extension
[ ereturn ] ( ethrow return ) def

# crank-agnostic casting
[ >macro ] ( [ VMACRO ] cast ) def
[ >stack ] ( [ VSTACK ] cast ) def

# generating words
"genlib.cog" load

# stackops extension
[ drop ] mkopn
[ swap ] mkopn
[ dup ] mkopn
[ eval ] mkopn

[ nip ] dup ( swap drop ) def mkopn
[ deep ] dup ( swap dip ) def mkopn

[ 2spin ] dup ( swap ) def mkopd
[ 3spin ] dup ( swap 2spind swap ) def mkopd
[ 4spin ] dup ( swap 3spind swap ) def mkopd

[ 2rot ] dup ( swap ) def mkopn
[ 3rot ] dup ( 2rotd swap ) def mkopn
[ 4rot ] dup ( 3rotd swap ) def mkopn
[ -2rot ] dup ( swap ) def mkopn
[ -3rot ] dup ( swap -2rotd ) def mkopn
[ -4rot ] dup ( swap ) def mkopn

[ 1pick ] dup ( dup ) def mkopn
[ 2pick ] dup ( 1pickd swap ) def mkopn
[ 3pick ] dup ( 2pickd swap ) def mkopn
[ 4pick ] dup ( 3pickd swap ) def mkopn

# alias stackops
[ dropd ] [ nip ] aliasn
[ dropt ] [ nipd ] aliasn
[ dropq ] [ nipt ] aliasn

[ evald ] [ deep ] aliasn
[ evalt ] [ deepd ] aliasn
[ evalq ] [ deept ] aliasn

[ spin ] dup ( 3spin ) def mkopd
[ rot ] dup ( 3rot ) def mkopn
[ -rot ] dup ( -3rot ) def mkopn
[ roll ] dup ( 4rot ) def mkopn
[ -roll ] dup ( -4rot ) def mkopn
[ pick ] dup ( 3pick ) def mkopn
[ reach ] dup ( 4pick ) def mkopn

# combinators extension
"combinators.cog" load

# dup variants
[ 2dup ] dup ( 2quote do eval ) [ 4 ] ( ( 2quote ) dip don eval ) bindopn mkopdn
[ 2dup ] dup ( swap dup ( swap dup ) dip swap ) def mkopd
[ 3dup ] dup ( 3quote do eval ) [ 17 ] ( ( 3quote ) dip don eval ) bindopn mkopdn
[ 4dup ] dup ( 4quote do eval ) [ 10 ] ( ( 4quote ) dip don eval ) bindopn mkopdn

[ over ] dup ( dupd swap ) def mkopd
[ 2over ] dup ( ( ( swap dup ) dip swap ) do dip swap ) def mkopd
[ 3over ] dup ( ( quote curry2 do ) dip swap eval ) def mkopd
[ 4over ] dup ( ( quote curry3 do ) dip swap eval ) def mkopd

# strings extension
"string.cog" load

# math extension
[ factorial ] dup
( dup non-pos? ( [ 1 ] + ) ( dup [ 1 ] - factorial * ) if ) def
( [ 2 ] swap ++ interval [ 1 ] ( * ) reduce ) def

[ abs ] ( dup neg? [ neg ] when ) def
[ factor? ] ( / isint ) def
[ even? ] ( 2.0 factor? ) def
[ odd? ] ( even? not ) def
