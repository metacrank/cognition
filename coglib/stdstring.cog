[ concat ] mkopn
[ precat ] ( swap concat ) defopn
[ unconcatd ] ( swap unconcat swap ) def
[ unconcatt ] ( ( unconcatd ) dip ) def
[ unconcatq ] ( ( unconcatt ) dip ) def

[ substr ] ( swapd cut drop swap cut nip ) def
[ >byte ] ( btoi ) defopd
[ >char ] ( itob ) defopd
[ b+ ] ( swap >byte + >char ) def
[ b- ] ( swap >byte swap - >char ) def
[ b++ ] ( >byte ++ >char ) def
[ b-- ] ( >byte -- >char ) def

[ 0cut ] ( "" swap ) defopd
[ 1cut ] ( one cut ) defopd
[ 2cut ] ( two cut ) defopd
[ 3cut ] ( three cut ) defopd
[ 4cut ] ( four cut ) defopd
[ cut* ] ( ( len ) dip - cut ) def
[ 1cut* ] ( len -- cut ) defopd
[ 2cut* ] ( len two - cut ) defopd
[ 3cut* ] ( len three - cut ) defopd
[ 4cut* ] ( len four - cut ) defopd

[ cfirst ] ( one cat ) def
[ csecond ] ( two cat ) def
[ cthird ] ( three cat ) def
[ cfourth ] ( four cat ) def
[ clast ] ( len -- cat ) def
[ csecond-last ] ( len two - cat ) def
[ cthird-last ] ( len three - cat ) def
[ cfourth-last ] ( len four - cat ) def

[ shead ] ( cut drop ) def
[ strim ] ( cut* drop ) def
[ stail ] ( cut nip ) def
[ sleave ] ( cut* nip ) def
[ sbut-last ] ( one strim ) def
[ srest ] ( one stail ) def

[ cnth ] ( cut nip srest ) def
[ cdel ] ( cut srest concat ) def
[ cpull ] ( cut 1cut swap concatd ) def
[ set-cat ] ( swapd cut srest swapd concat2 ) def
[ swap-cat ] ( swapd cut 1cut spind concat2 swap ) def
[ change-cat ] ( ( dup ( cpull ) dip ) dip drill-operator dip insert ) def

[ rejoin ] ( "" concat ) defopd
[ combine ] ( join rejoin ) defopd

[ seach ] ( unconcatd each ) def
[ seach-index ] ( unconcatd each-index ) def
[ smap ] ( unconcatd map rejoin ) def
[ sfilter ] ( unconcatd filter rejoin ) def
[ sreduce ] ( unconcatd reduce ) def
[ smap-reduce ] ( unconcatt map-reduce ) def

[ sfind-from ] ( unconcatt find-from rejoint ) def
[ sfind-last-from ] ( unconcatt find-last-from rejoint ) def
[ sfind ] ( unconcatd find rejoint ) def
[ sfind-last ] ( unconcatd find-last rejoint ) def
[ cindex-from ] ( unconcatt index-from rejoind ) def
[ clast-index-from ] ( unconcatt last-index-from rejoind ) def
[ cindex ] ( unconcatd index rejoind ) def
[ clast-index ] ( unconcatd last-index rejoind ) def

# better string prefix character
[ strquote-escape ] ( (
    [
      [ "n" ] ( endl ) ]
      [ "t" ] ( tab ) ]
      [ [ \ " ] ( [ \ " ] ) ]
      [ [ \ \ ] ( [ \ \ ] ) ]
      [ "r" ( cret ) ]
      ( "INVALID STRING ESCAPE" ereturn )
    ] case concat over
  )
) def
[ strquote-end0 ] ( drop nip swap one swap metacrank swap crank swap sets swap setd swap seti stgl ) def
[ strquote-end1 ] ( strquote-end0 push over ) def
[ \ " ] [ \ " ] (
  geti getd gets "" setd "" seti "" sets stgl
  crankbase one metacrankbase dup zero?
  [ ( dup [ \ \ ] = ( strquote-escape ) ( dup [ \ " ] = ( strquote-end0 ) ( concat over ) if ) if ) ]
  [ ( dup [ \ \ ] = ( strquote-escape ) ( dup [ \ " ] = ( strquote-end1 ) ( concat over ) if ) if ) ]
  if dup "" swap halt one one metacrank
) def singlet

[ strquote-escape strquote-end0 strquote-end1 ] ( undef ) each
